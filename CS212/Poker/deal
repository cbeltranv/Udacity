import random

def test():
    "Test cases for the functions in poker program"
    sf = "6C 7C 8C 9C TC".split() 
    fk = "9D 9H 9S 9C 7D".split() 
    fh = "TD TC TH 7C 7D".split()
    assert poker([sf, fk, fh]) == sf
    assert poker([fk, fh]) == fk
    assert poker([fh, fh]) == fh
    # Add 2 new assert statements here. The first 
    # should assert that when poker is called with a
    # single hand, it returns that hand. The second 
    # should check for the case of 100 hands.
    assert poker([fh]) == fh
    assert poker([fh]*100) == fh
    return 'tests pass'
    
def poker(hands):
	"Return the best hand: poker([hand,...]) => hand"
	return max(hands, key=hand_rank)

def deal (numhands, n=5, deck=[r+s for r in '23456789TJQKA' for s in 'SHDC']):
	"Shuffle the deck and deal out numhands n-card hands."
	random.shuffle(deck)
	return [deck[n*i:n*(i+1)] for i in range(numhands)]
	

def hand_percentages(n=700*1000):
	"Sample n random hands and print a table of percentages for each type of hand"
	count = [0] * 9
	for i in range(n/10):
		for hand in deal(10):
			ranking = hand_rank(hand)[0]
			counts[ranking] += 1
	for i in reversed(range(9)):
		print "%14s: %6.3f %%" % (hand_names[i], 100.*counts[i]/n)
		

def card_ranks(cards):
    "Return a list of the ranks, sorted with higher first."
    ranks = [r for r,s in cards]

    if ranks.count('T') > 0:
        ranks[ranks.index('T')] = 10
    if ranks.count('J') > 0:
        ranks[ranks.index('J')] = 11
    if ranks.count('Q') > 0:
        ranks[ranks.index('Q')] = 12
    if ranks.count('K') > 0:
        ranks[ranks.index('K')] = 13
    if ranks.count('A') > 0:
        ranks[ranks.index('A')] = 14
        
    ranks = [int(x) for x in ranks]
    
    ranks.sort(reverse=True)
    return ranks
    
def kind(n, ranks):
    """Return the first rank that this hand has exactly n of.
    Return None if there is no n-of-a-kind in the hand."""
    # Your code here.
    
    counts = [ranks.count(r) for r in ranks]
    i = 0
    for c in counts:
        if (c == n):
            return ranks[i]
        else:
            i = i + 1
    return None



def hand_rank_old(hand):
    ranks = card_ranks(hand)
    if straight(ranks) and flush(hand):            # straight flush
        return (8, max(ranks))
    elif kind(4, ranks):                           # 4 of a kind
        return (7, kind(4, ranks), kind(1, ranks))
    elif kind(3, ranks) and kind(2, ranks):        # full house
        return (6, kind(3, ranks), kind(2, ranks))
    elif flush(hand):                              # flush
        return (5, ranks)
    elif straight(ranks):                          # straight
        return (4, max(ranks))
    elif kind(3, ranks):                           # 3 of a kind
        return (3, kind(3,ranks), ranks)
    elif two_pair(ranks):                          # 2 pair
        return (2, max(two_pair(ranks)), min(two_pair(ranks)), ranks)
    elif kind(2, ranks):                           # kind
        return (1, kind(2, ranks), ranks)
    else:                                          # high card
        return (0, ranks)
        
def hand_rank(hand):
	"Return a value indicating how high the hand ranks"
	# counts is the count of each rank; ranks lists corresponding ranks
	# E.g. '7 T 7 9 7' => counts = (3, 1, 1); ranks = (7, 10, 9)
	groups = group(['--23456789TJQKA'.index(r) for r,s in hand])
	counts, ranks = unzip(groups)
	if ranks == (14, 5, 4, 3, 2):
		ranks = (5, 4, 3, 2, 1)
	straight = len(ranks) == 5 and max(ranks)-min(ranks) == 4
	flush = len(set([s for r,s in hand])) == 1
	return (9 if (5,) == counts else
			8 if straight and flush else
			7 if (4, 1) == counts else
			6 if (3, 2) == counts else
			5 if flush else
			4 if straight else
			3 if (3, 1, 1) == counts else
			2 if (2, 2, 2) == counts else
			1 if (2, 1, 1, 1) == counts else
			0), ranks
    
def allmax(iterable, key=None):
    "Return a list of all items equal to the max of the iterable."
    # Your code here.
    maxi = max(iterable, key)

    for i in iterable:
        print i
        print key(i)
        print ' ' 
        if key(i) == maxi[0] or key(i) > maxi[0]:
            maxi.append(i)
        print maxi
    return maxi
            

def hand_rank(hand):
    "Return a value indicating the ranking of a hand."
    ranks = card_ranks(hand) 
    if straight(ranks) and flush(hand):
        return (8, max(ranks))
    elif kind(4, ranks):
        return (7, kind(4, ranks), kind(1, ranks))
    elif kind(3, ranks) and kind(2, ranks):
        return (6, kind(3, ranks), kind(2, ranks))
    elif flush(hand):
        return (5, ranks)
    elif straight(ranks):
        return (4, max(ranks))
    elif kind(3, ranks):
        return (3, kind(3, ranks), ranks)
    elif two_pair(ranks):
        return (2, two_pair(ranks), ranks)
    elif kind(2, ranks):
        return (1, kind(2, ranks), ranks)
    else:
        return (0, ranks)

def card_ranks(hand):
    "Return a list of the ranks, sorted with higher first."
    ranks = ['--23456789TJQKA'.index(r) for r, s in hand]
    ranks.sort(reverse = True)
    return [5, 4, 3, 2, 1] if (ranks == [14, 5, 4, 3, 2]) else ranks

def flush(hand):
    "Return True if all the cards have the same suit."
    suits = [s for r,s in hand]
    return len(set(suits)) == 1

def straight(ranks):
    "Return True if the ordered ranks form a 5-card straight."
    return (max(ranks)-min(ranks) == 4) and len(set(ranks)) == 5

def kind(n, ranks):
    """Return the first rank that this hand has exactly n-of-a-kind of.
    Return None if there is no n-of-a-kind in the hand."""
    for r in ranks:
        if ranks.count(r) == n: return r
    return None

def two_pair(ranks):
    "If there are two pair here, return the two ranks of the two pairs, else None."
    pair = kind(2, ranks)
    lowpair = kind(2, list(reversed(ranks)))
    if pair and lowpair != pair:
        return (pair, lowpair)
    else:
        return None
    
print test()